// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/grpc_clean.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCCleanServiceClient is the client API for GRPCCleanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCCleanServiceClient interface {
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessResponse, error)
	Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error)
	Task1(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task1Response, error)
	Task2(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task2Response, error)
	Task3(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task3Response, error)
}

type gRPCCleanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCCleanServiceClient(cc grpc.ClientConnInterface) GRPCCleanServiceClient {
	return &gRPCCleanServiceClient{cc}
}

func (c *gRPCCleanServiceClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/GRPCCleanService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCleanServiceClient) Tasks(ctx context.Context, in *TasksRequest, opts ...grpc.CallOption) (*TasksResponse, error) {
	out := new(TasksResponse)
	err := c.cc.Invoke(ctx, "/GRPCCleanService/Tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCleanServiceClient) Task1(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task1Response, error) {
	out := new(Task1Response)
	err := c.cc.Invoke(ctx, "/GRPCCleanService/Task1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCleanServiceClient) Task2(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task2Response, error) {
	out := new(Task2Response)
	err := c.cc.Invoke(ctx, "/GRPCCleanService/Task2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCleanServiceClient) Task3(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*Task3Response, error) {
	out := new(Task3Response)
	err := c.cc.Invoke(ctx, "/GRPCCleanService/Task3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCCleanServiceServer is the server API for GRPCCleanService service.
// All implementations must embed UnimplementedGRPCCleanServiceServer
// for forward compatibility
type GRPCCleanServiceServer interface {
	Hello(context.Context, *Empty) (*SuccessResponse, error)
	Tasks(context.Context, *TasksRequest) (*TasksResponse, error)
	Task1(context.Context, *TaskRequest) (*Task1Response, error)
	Task2(context.Context, *TaskRequest) (*Task2Response, error)
	Task3(context.Context, *TaskRequest) (*Task3Response, error)
	mustEmbedUnimplementedGRPCCleanServiceServer()
}

// UnimplementedGRPCCleanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCCleanServiceServer struct {
}

func (UnimplementedGRPCCleanServiceServer) Hello(context.Context, *Empty) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedGRPCCleanServiceServer) Tasks(context.Context, *TasksRequest) (*TasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tasks not implemented")
}
func (UnimplementedGRPCCleanServiceServer) Task1(context.Context, *TaskRequest) (*Task1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task1 not implemented")
}
func (UnimplementedGRPCCleanServiceServer) Task2(context.Context, *TaskRequest) (*Task2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task2 not implemented")
}
func (UnimplementedGRPCCleanServiceServer) Task3(context.Context, *TaskRequest) (*Task3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task3 not implemented")
}
func (UnimplementedGRPCCleanServiceServer) mustEmbedUnimplementedGRPCCleanServiceServer() {}

// UnsafeGRPCCleanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCCleanServiceServer will
// result in compilation errors.
type UnsafeGRPCCleanServiceServer interface {
	mustEmbedUnimplementedGRPCCleanServiceServer()
}

func RegisterGRPCCleanServiceServer(s grpc.ServiceRegistrar, srv GRPCCleanServiceServer) {
	s.RegisterService(&GRPCCleanService_ServiceDesc, srv)
}

func _GRPCCleanService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCleanServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCCleanService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCleanServiceServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCleanService_Tasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCleanServiceServer).Tasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCCleanService/Tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCleanServiceServer).Tasks(ctx, req.(*TasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCleanService_Task1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCleanServiceServer).Task1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCCleanService/Task1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCleanServiceServer).Task1(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCleanService_Task2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCleanServiceServer).Task2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCCleanService/Task2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCleanServiceServer).Task2(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCleanService_Task3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCleanServiceServer).Task3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GRPCCleanService/Task3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCleanServiceServer).Task3(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCCleanService_ServiceDesc is the grpc.ServiceDesc for GRPCCleanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCCleanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRPCCleanService",
	HandlerType: (*GRPCCleanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GRPCCleanService_Hello_Handler,
		},
		{
			MethodName: "Tasks",
			Handler:    _GRPCCleanService_Tasks_Handler,
		},
		{
			MethodName: "Task1",
			Handler:    _GRPCCleanService_Task1_Handler,
		},
		{
			MethodName: "Task2",
			Handler:    _GRPCCleanService_Task2_Handler,
		},
		{
			MethodName: "Task3",
			Handler:    _GRPCCleanService_Task3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc_clean.proto",
}
